---
- name: Fedora machine setup
  hosts: localhost
  connection: local
  become: true
  gather_facts: true
  vars:
    # flyctl_version: "0.1.130"
    # pulumi_version: "v3.94.2"

  tasks:
    - name: Get my user
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

    - debug: var={{ remote_regular_user }}

    # - name: Install packages
    #   ansible.builtin.dnf:
    #     name:
    #       - git
    #       - htop
    #       - vim
    #       - firefox
    #       - gh
    #       - gnome-tweaks
    #       - gcc
    #       - helm
    #       - go-task
    #       - ripgrep
    #       - poetry
    #       - zsh
    #       - fzf
    #       - tmux
    #       - ffmpeg-free
    #       - zlib
    #       - zlib-devel
    #       - make
    #       - patch
    #       - bzip2
    #       - bzip2-devel
    #       - readline-devel
    #       - sqlite
    #       - sqlite-devel
    #       - openssl-devel
    #       - tk-devel
    #       - libffi-devel
    #       - xz-devel
    #       - libuuid-devel
    #       - gdbm-libs
    #       - libnsl2
    #       - luarocks
    #       - wl-clipboard
    #       - fd-find
    #       - gcc-c++
    #       - doctl
    #       - helix
    #       - "@Development Tools"
    #       - "@C Development Tools and Libraries"
    #       - autoconf
    #       - ncurses-devel
    #       - wxGTK-devel
    #       - wxBase
    #       - java-1.8.0-openjdk-devel
    #       - libiodbc
    #       - unixODBC-devel.x86_64
    #       - erlang-odbc.x86_64
    #       - libxslt
    #       - fop
    #       - podman-compose
    #       - inotify-tools
    #       - blender
    #       - toilet
    #       - dotnet-sdk-8.0
    #       - unar
    #     state: present
    #
    # - name: Change shell to zsh
    #   ansible.builtin.user:
    #     name: "{{ remote_regular_user }}"
    #     shell: /usr/bin/zsh
    #
    # - name: Install DNF plugins core
    #   ansible.builtin.dnf:
    #     name: dnf-plugins-core
    #     state: present
    #
    # - name: Add Brave Browser Repo
    #   ansible.builtin.yum_repository:
    #     name: brave-browser
    #     description: Brave Browser
    #     baseurl: https://brave-browser-rpm-release.s3.brave.com/x86_64/
    #     gpgkey: https://brave-browser-rpm-release.s3.brave.com/brave-core.asc
    #     gpgcheck: true
    #     enabled: true
    #
    # - name: Import Brave Browser GPG Key
    #   ansible.builtin.rpm_key:
    #     key: https://brave-browser-rpm-release.s3.brave.com/brave-core.asc
    #     state: present
    #
    # - name: Install Brave Browser
    #   ansible.builtin.dnf:
    #     name: brave-browser
    #     state: present
    #
    # - name: Import Microsoft GPG Key
    #   ansible.builtin.rpm_key:
    #     key: https://packages.microsoft.com/keys/microsoft.asc
    #     state: present
    #
    # - name: Add Visual Studio Code Repo
    #   ansible.builtin.yum_repository:
    #     name: vscode
    #     description: Visual Studio Code
    #     baseurl: https://packages.microsoft.com/yumrepos/vscode
    #     gpgkey: https://packages.microsoft.com/keys/microsoft.asc
    #     gpgcheck: true
    #     enabled: true
    #
    # - name: Install VS Code
    #   ansible.builtin.dnf:
    #     name: code
    #     state: present
    #
    # - name: Add Docker repo
    #   ansible.builtin.yum_repository:
    #     name: docker
    #     description: Docker repo
    #     baseurl: "https://download.docker.com/linux/fedora/{{ ansible_distribution_major_version }}/{{ ansible_architecture }}/stable"
    #     gpgkey: "https://download.docker.com/linux/fedora/gpg"
    #     gpgcheck: true
    #     enabled: true
    #
    # - name: Install Docker
    #   ansible.builtin.dnf:
    #     name:
    #       - docker-ce
    #       - docker-ce-cli
    #       - containerd.io
    #       - docker-buildx-plugin
    #       - docker-compose-plugin
    #     state: present
    #
    # - name: Add Docker group
    #   ansible.builtin.group:
    #     name: docker
    #     state: present
    #
    # - name: Add user to docker group
    #   ansible.builtin.user:
    #     name: "{{ remote_regular_user }}"
    #     groups: docker
    #     append: true
    #
    # - name: Add rtx config manager
    #   ansible.builtin.yum_repository:
    #     name: rtx
    #     description: RTX Repo
    #     baseurl: https://rtx.pub/rpm
    #     gpgkey: https://rtx.pub/gpg-key.pub
    #     gpgcheck: true
    #     enabled: true
    #
    # - name: Install RTX
    #   ansible.builtin.dnf:
    #     name: rtx
    #     state: present
    #
    # - name: Add kubectl repo
    #   ansible.builtin.yum_repository:
    #     name: Kubernetes
    #     description: Kubernetes repo
    #     baseurl: https://pkgs.k8s.io/core:/stable:/v1.28/rpm/
    #     gpgkey: https://pkgs.k8s.io/core:/stable:/v1.28/rpm/repodata/repomd.xml.key
    #     gpgcheck: true
    #     enabled: true
    #
    # - name: Install kubectl
    #   ansible.builtin.dnf:
    #     name: kubectl
    #     state: present
    #
    # - name: Add Hashicorp Repo
    #   ansible.builtin.yum_repository:
    #     name: hashicorp
    #     description: Hashicorp repo
    #     baseurl: https://rpm.releases.hashicorp.com/fedora/$releasever/$basearch/stable
    #     gpgkey: https://rpm.releases.hashicorp.com/gpg
    #     gpgcheck: true
    #     enabled: true
    #
    # - name: Install Terraform
    #   ansible.builtin.dnf:
    #     name: terraform
    #     state: present
    #
    # - name: Check if Pulumi is installed
    #   ansible.builtin.command:
    #     cmd: pulumi version
    #   register: pulumi_installed
    #   ignore_errors: true
    #   changed_when: false
    #
    # - name: Download Pulumi SDK
    #   ansible.builtin.get_url:
    #     url: "https://get.pulumi.com/releases/sdk/pulumi-{{ pulumi_version }}-linux-x64.tar.gz"
    #     dest: "/tmp/pulumi-{{ pulumi_version }}-linux-x64.tar.gz"
    #     mode: "0644"
    #   when: pulumi_installed is failed or pulumi_installed.stdout is not search(pulumi_version)
    #
    # - name: Extract Pulumi to /usr/local/bin
    #   ansible.builtin.unarchive:
    #     src: "/tmp/pulumi-{{ pulumi_version }}-linux-x64.tar.gz"
    #     dest: /usr/local/bin
    #     extra_opts: [--strip-components=1]
    #     creates: /usr/local/bin/pulumi
    #   when: pulumi_installed is failed or pulumi_installed.stdout is not search(pulumi_version)
    #
    # - name: Check if the targeted version of flyctl is installed
    #   ansible.builtin.command: flyctl version
    #   register: installed_flyctl_version
    #   ignore_errors: true
    #   changed_when: false
    #
    # - name: Download flyctl tar.gz
    #   ansible.builtin.get_url:
    #     url: "https://github.com/superfly/flyctl/releases/download/v{{ flyctl_version }}/flyctl_{{ flyctl_version }}_Linux_x86_64.tar.gz"
    #     dest: "/tmp/flyctl_{{ flyctl_version }}_Linux_x86_64.tar.gz"
    #     mode: "0644"
    #   when: flyctl_version not in installed_flyctl_version.stdout
    #
    # - name: Extract flyctl to /usr/local/bin
    #   ansible.builtin.unarchive:
    #     src: "/tmp/flyctl_{{ flyctl_version }}_Linux_x86_64.tar.gz"
    #     dest: "/usr/local/bin"
    #     remote_src: true
    #   when: flyctl_version not in installed_flyctl_version.stdout
    #
    # - name: Install Flatpak packages
    #   community.general.flatpak:
    #     name:
    #       - com.obsproject.Studio
    #       - org.videolan.VLC
    #       - org.tenacityaudio.Tenacity
    #       - md.obsidian.Obsidian
    #       - org.gimp.GIMP
    #       - rest.insomnia.Insomnia
    #       - com.github.johnfactotum.Foliate
    #       - org.gnome.meld
    #       - org.sqlitebrowser.sqlitebrowser
    #     state: present
    #
    # - name: Ensure fonts directory
    #   ansible.builtin.file:
    #     path: "~{{ remote_regular_user }}/.fonts"
    #     state: directory
    #     mode: "0755"
    #     owner: "{{ remote_regular_user }}"
    #
    # - name: Check if Jetbrains Mono exists
    #   ansible.builtin.shell: "ls ~{{ remote_regular_user }}/.fonts/JetBrainsMonoNerd*FontMono*"
    #   register: jetbrains_mono_exists
    #   ignore_errors: true
    #   changed_when: false
    #
    # - name: Download Jetbrains mono
    #   when: jetbrains_mono_exists is failed
    #   ansible.builtin.unarchive:
    #     src: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/JetBrainsMono.zip
    #     dest: "~{{ remote_regular_user }}/.fonts/"
    #     remote_src: true
    #     mode: "0755"
    #     owner: "{{ remote_regular_user }}"
